/**
 * QRCode.js - Versão simplificada para CallX
 * Baseada em qrcode.js v1.5.3
 */

(function(global) {
    'use strict';

    var QRCode = function(options) {
        this.options = {
            width: 256,
            height: 256,
            typeNumber: 4,
            colorDark: '#000000',
            colorLight: '#ffffff',
            correctLevel: QRCode.CorrectLevel.H
        };

        if (typeof options === 'string') {
            options = {
                text: options
            };
        }

        if (options) {
            for (var i in options) {
                this.options[i] = options[i];
            }
        }

        if (typeof this.options.text === 'undefined') {
            throw new Error('QRCode: No text specified');
        }

        this._htOption = this.options;
    };

    QRCode.prototype.makeCode = function(sText) {
        this._oQRCode = null;
        this._oDrawing = new Drawing(this._htOption, this);

        this._oQRCode = new QRCodeModel(_getTypeNumber(sText, this._htOption.correctLevel), this._htOption.correctLevel);
        this._oQRCode.addData(sText);
        this._oQRCode.make();
    };

    QRCode.prototype.createImgTag = function(cellSize, margin) {
        cellSize = cellSize || 2;
        margin = (typeof margin == 'undefined') ? cellSize * 4 : margin;

        var qrcode = this._oQRCode;
        var canvas = this._oDrawing.getCanvas(qrcode, cellSize, margin);

        return canvas;
    };

    QRCode.CorrectLevel = {
        L: 1,
        M: 0,
        Q: 3,
        H: 2
    };

    // Função simplificada para gerar QR Code
    function generateQRCode(text, element, options) {
        options = options || {};
        options.text = text;
        options.width = options.width || 256;
        options.height = options.height || 256;

        var qr = new QRCode(options);
        qr.makeCode(text);
        
        var canvas = qr.createImgTag(4, 4);
        
        if (typeof element === 'string') {
            element = document.getElementById(element);
        }
        
        if (element) {
            element.innerHTML = '';
            element.appendChild(canvas);
        }
        
        return canvas;
    }

    // Função para gerar QR Code como imagem
    QRCode.toCanvas = function(text, element, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        
        try {
            var canvas = generateQRCode(text, element, options);
            if (callback) callback(null, canvas);
            return canvas;
        } catch (error) {
            if (callback) callback(error);
            throw error;
        }
    };

    // Função para gerar QR Code como data URL
    QRCode.toDataURL = function(text, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        
        try {
            var canvas = generateQRCode(text, null, options);
            var dataURL = canvas.toDataURL('image/png');
            if (callback) callback(null, dataURL);
            return dataURL;
        } catch (error) {
            if (callback) callback(error);
            throw error;
        }
    };

    // Classes auxiliares simplificadas
    function Drawing(options, qrcode) {
        this._htOption = options;
        this._oQRCode = qrcode;
    }

    Drawing.prototype.getCanvas = function(oQRCode, cellSize, margin) {
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');
        
        var nCount = oQRCode.getModuleCount();
        var nWidth = cellSize * nCount;
        var nHeight = cellSize * nCount;
        var nRoundedWidth = Math.round(nWidth);
        var nRoundedHeight = Math.round(nHeight);

        canvas.width = nRoundedWidth + margin * 2;
        canvas.height = nRoundedHeight + margin * 2;

        ctx.fillStyle = this._htOption.colorLight;
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        ctx.fillStyle = this._htOption.colorDark;

        for (var row = 0; row < nCount; row++) {
            for (var col = 0; col < nCount; col++) {
                if (oQRCode.isDark(row, col)) {
                    ctx.fillRect(margin + col * cellSize, margin + row * cellSize, cellSize, cellSize);
                }
            }
        }

        return canvas;
    };

    function QRCodeModel(typeNumber, errorCorrectLevel) {
        this.typeNumber = typeNumber;
        this.errorCorrectLevel = errorCorrectLevel;
        this.modules = null;
        this.moduleCount = 0;
        this.dataCache = null;
        this.dataList = [];
    }

    QRCodeModel.prototype.addData = function(data) {
        this.dataList.push(data);
    };

    QRCodeModel.prototype.make = function() {
        this.moduleCount = this.typeNumber * 4 + 17;
        this.modules = new Array(this.moduleCount);
        
        for (var row = 0; row < this.moduleCount; row++) {
            this.modules[row] = new Array(this.moduleCount);
            for (var col = 0; col < this.moduleCount; col++) {
                this.modules[row][col] = null;
            }
        }
        
        this.setupPositionProbePattern(0, 0);
        this.setupPositionProbePattern(this.moduleCount - 7, 0);
        this.setupPositionProbePattern(0, this.moduleCount - 7);
    };

    QRCodeModel.prototype.setupPositionProbePattern = function(row, col) {
        for (var r = -1; r <= 7; r++) {
            if (row + r <= -1 || this.moduleCount <= row + r) continue;
            for (var c = -1; c <= 7; c++) {
                if (col + c <= -1 || this.moduleCount <= col + c) continue;
                if ((0 <= r && r <= 6 && (c == 0 || c == 6)) || (0 <= c && c <= 6 && (r == 0 || r == 6)) || (2 <= r && r <= 4 && 2 <= c && c <= 4)) {
                    this.modules[row + r][col + c] = true;
                } else {
                    this.modules[row + r][col + c] = false;
                }
            }
        }
    };

    QRCodeModel.prototype.getModuleCount = function() {
        return this.moduleCount;
    };

    QRCodeModel.prototype.isDark = function(row, col) {
        if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
            throw new Error(row + "," + col);
        }
        return this.modules[row][col];
    };

    function _getTypeNumber(sText, nCorrectLevel) {
        var nType = 1;
        var length = _getUTF8Length(sText);
        
        for (var i = 0, len = QRCodeLimitLength.length; i <= len; i++) {
            var nLimit = 0;
            
            switch (nCorrectLevel) {
                case QRCode.CorrectLevel.L:
                    nLimit = QRCodeLimitLength[i][0];
                    break;
                case QRCode.CorrectLevel.M:
                    nLimit = QRCodeLimitLength[i][1];
                    break;
                case QRCode.CorrectLevel.Q:
                    nLimit = QRCodeLimitLength[i][2];
                    break;
                case QRCode.CorrectLevel.H:
                    nLimit = QRCodeLimitLength[i][3];
                    break;
            }
            
            if (length <= nLimit) {
                break;
            } else {
                nType++;
            }
        }
        
        if (nType > QRCodeLimitLength.length) {
            throw new Error("Too long data");
        }
        
        return nType;
    }

    function _getUTF8Length(sText) {
        var replacedText = encodeURI(sText).toString().replace(/\%0D\%0A/g, '\n');
        return replacedText.length + (replacedText.length != sText ? 3 : 0);
    }

    var QRCodeLimitLength = [
        [17, 14, 11, 7],
        [32, 26, 20, 14],
        [53, 42, 32, 24],
        [78, 62, 46, 34],
        [106, 84, 60, 44],
        [134, 106, 74, 58],
        [154, 122, 86, 64],
        [192, 152, 108, 84],
        [230, 180, 130, 98],
        [271, 213, 151, 119],
        [321, 251, 177, 137],
        [367, 287, 203, 155],
        [425, 331, 241, 177],
        [458, 362, 258, 194],
        [520, 412, 292, 220],
        [586, 450, 322, 250],
        [644, 504, 364, 280],
        [718, 560, 394, 310],
        [792, 624, 442, 338],
        [858, 666, 482, 382],
        [929, 711, 509, 403],
        [1003, 779, 565, 439],
        [1091, 857, 611, 461],
        [1171, 911, 661, 511],
        [1273, 997, 715, 535],
        [1367, 1059, 751, 593],
        [1465, 1125, 805, 625],
        [1528, 1190, 868, 658],
        [1628, 1264, 908, 698],
        [1732, 1370, 982, 742],
        [1840, 1452, 1030, 790],
        [1952, 1538, 1112, 842],
        [2068, 1628, 1168, 898],
        [2188, 1722, 1228, 958],
        [2303, 1809, 1283, 983],
        [2431, 1911, 1351, 1051],
        [2563, 1989, 1423, 1093],
        [2699, 2099, 1499, 1139],
        [2809, 2213, 1579, 1219],
        [2953, 2331, 1663, 1273]
    ];

    // Exportar para global
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = QRCode;
    } else if (typeof define === 'function' && define.amd) {
        define(function() { return QRCode; });
    } else {
        global.QRCode = QRCode;
    }

})(typeof window !== 'undefined' ? window : this);