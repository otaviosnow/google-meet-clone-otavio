require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User.js');
const bcrypt = require('bcryptjs');

console.log('üîß === TESTE E CORRE√á√ÉO DO BCRYPT ===\n');

mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(async () => {
    console.log('‚úÖ Conectado ao MongoDB');
    
    try {
        // 1. Testar bcrypt isoladamente
        console.log('\nüß™ 1. Testando bcrypt isoladamente...');
        const testPassword = '@Teste90';
        const salt = await bcrypt.genSalt(12);
        const hash = await bcrypt.hash(testPassword, salt);
        const isValid = await bcrypt.compare(testPassword, hash);
        
        console.log(`   - Senha: ${testPassword}`);
        console.log(`   - Hash: ${hash.substring(0, 20)}...`);
        console.log(`   - V√°lida: ${isValid}`);
        
        if (!isValid) {
            console.log('‚ùå PROBLEMA COM BCRYPT!');
            return;
        }
        
        // 2. Buscar usu√°rio
        console.log('\nüîç 2. Buscando usu√°rio...');
        const user = await User.findOne({ email: 'teste90@gmail.com' }).select('+password');
        
        if (!user) {
            console.log('‚ùå Usu√°rio n√£o encontrado!');
            return;
        }
        
        console.log('‚úÖ Usu√°rio encontrado:');
        console.log(`   - Hash atual: ${user.password.substring(0, 20)}...`);
        
        // 3. Criar novo hash
        console.log('\nüîê 3. Criando novo hash...');
        const newSalt = await bcrypt.genSalt(12);
        const newHash = await bcrypt.hash('@Teste90', newSalt);
        
        console.log(`   - Novo hash: ${newHash.substring(0, 20)}...`);
        
        // 4. Testar novo hash
        const isNewValid = await bcrypt.compare('@Teste90', newHash);
        console.log(`   - Novo hash v√°lido: ${isNewValid}`);
        
        if (isNewValid) {
            // 5. Atualizar usu√°rio
            console.log('\nüíæ 4. Atualizando usu√°rio...');
            user.password = newHash;
            user.visionTokens = 1000;
            user.isAdmin = true;
            user.isActive = true;
            
            await user.save();
            console.log('‚úÖ Usu√°rio atualizado');
            
            // 6. Testar m√©todo comparePassword
            console.log('\nüß™ 5. Testando m√©todo comparePassword...');
            const isMethodValid = await user.comparePassword('@Teste90');
            console.log(`   - M√©todo comparePassword: ${isMethodValid}`);
            
            if (isMethodValid) {
                console.log('‚úÖ M√âTODO FUNCIONANDO!');
                
                // 7. Testar toPublicJSON
                console.log('\nüì§ 6. Testando toPublicJSON()...');
                const publicData = user.toPublicJSON();
                console.log('   Dados p√∫blicos:');
                console.log(`   - Tokens: ${publicData.visionTokens}`);
                console.log(`   - Admin: ${publicData.isAdmin}`);
                
                if (publicData.visionTokens === 1000 && publicData.isAdmin === true) {
                    console.log('‚úÖ DADOS CORRETOS!');
                    console.log('\nüéâ SUCESSO TOTAL!');
                    console.log('üìù EMAIL: teste90@gmail.com');
                    console.log('üìù SENHA: @Teste90');
                    console.log('üìù TOKENS: 1000');
                    console.log('üìù ADMIN: true');
                } else {
                    console.log('‚ùå PROBLEMA COM DADOS P√öBLICOS!');
                }
            } else {
                console.log('‚ùå PROBLEMA COM M√âTODO comparePassword!');
            }
        } else {
            console.log('‚ùå PROBLEMA COM NOVO HASH!');
        }
        
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
    
    mongoose.connection.close();
    console.log('\nüîå Conex√£o fechada');
})
.catch(err => {
    console.error('‚ùå Erro de conex√£o:', err);
    process.exit(1);
});
