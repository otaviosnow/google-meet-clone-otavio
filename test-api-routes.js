const fetch = require('node-fetch');

// Configura√ß√£o
const BASE_URL = process.env.API_URL || 'http://localhost:10000';
let authToken = null;
let testUserId = null;
let testVideoId = null;
let testMeetingId = null;
let testTokenId = null;

// Fun√ß√£o para fazer requisi√ß√µes
async function makeRequest(endpoint, options = {}) {
    const url = `${BASE_URL}${endpoint}`;
    const config = {
        headers: {
            'Content-Type': 'application/json',
            ...(authToken && { 'Authorization': `Bearer ${authToken}` }),
            ...options.headers
        },
        ...options
    };
    
    try {
        console.log(`üì° ${options.method || 'GET'} ${endpoint}`);
        const response = await fetch(url, config);
        const data = await response.json();
        
        console.log(`   Status: ${response.status}`);
        if (response.ok) {
            console.log(`   ‚úÖ Sucesso`);
        } else {
            console.log(`   ‚ùå Erro: ${data.error || 'Erro desconhecido'}`);
        }
        
        return { response, data };
    } catch (error) {
        console.log(`   ‚ùå Erro de rede: ${error.message}`);
        return { response: null, data: null };
    }
}

// Teste 1: Verificar se a API est√° online
async function testApiOnline() {
    console.log('\n1Ô∏è‚É£ Testando se a API est√° online...');
    const { response, data } = await makeRequest('/api/test');
    return response && response.ok;
}

// Teste 2: Autentica√ß√£o
async function testAuth() {
    console.log('\n2Ô∏è‚É£ Testando autentica√ß√£o...');
    
    // Teste de registro
    console.log('   üìù Testando registro...');
    const registerData = {
        name: 'Teste Integra√ß√£o',
        email: 'teste.integracao@test.com',
        password: '@Teste123'
    };
    
    const { response: registerResponse, data: registerResult } = await makeRequest('/api/auth/register', {
        method: 'POST',
        body: JSON.stringify(registerData)
    });
    
    if (registerResponse && registerResponse.ok) {
        authToken = registerResult.token;
        testUserId = registerResult.user._id;
        console.log('   ‚úÖ Registro bem-sucedido');
    } else {
        // Tentar login se registro falhar
        console.log('   üîÑ Tentando login...');
        const loginData = {
            email: 'teste.integracao@test.com',
            password: '@Teste123'
        };
        
        const { response: loginResponse, data: loginResult } = await makeRequest('/api/auth/login', {
            method: 'POST',
            body: JSON.stringify(loginData)
        });
        
        if (loginResponse && loginResponse.ok) {
            authToken = loginResult.token;
            testUserId = loginResult.user._id;
            console.log('   ‚úÖ Login bem-sucedido');
        } else {
            console.log('   ‚ùå Falha na autentica√ß√£o');
            return false;
        }
    }
    
    return true;
}

// Teste 3: V√≠deos
async function testVideos() {
    console.log('\n3Ô∏è‚É£ Testando rotas de v√≠deos...');
    
    // Listar v√≠deos
    console.log('   üìã Listando v√≠deos...');
    const { response: listResponse, data: videos } = await makeRequest('/api/videos');
    
    if (listResponse && listResponse.ok && videos.length > 0) {
        testVideoId = videos[0]._id;
        console.log(`   ‚úÖ ${videos.length} v√≠deos encontrados`);
    } else {
        // Criar v√≠deo de teste
        console.log('   ‚ûï Criando v√≠deo de teste...');
        const videoData = {
            title: 'V√≠deo de Teste',
            type: 'url',
            url: 'https://exemplo.com/video.mp4'
        };
        
        const { response: createResponse, data: newVideo } = await makeRequest('/api/videos', {
            method: 'POST',
            body: JSON.stringify(videoData)
        });
        
        if (createResponse && createResponse.ok) {
            testVideoId = newVideo._id;
            console.log('   ‚úÖ V√≠deo criado com sucesso');
        } else {
            console.log('   ‚ùå Falha ao criar v√≠deo');
            return false;
        }
    }
    
    return true;
}

// Teste 4: Reuni√µes
async function testMeetings() {
    console.log('\n4Ô∏è‚É£ Testando rotas de reuni√µes...');
    
    if (!testVideoId) {
        console.log('   ‚ùå Nenhum v√≠deo dispon√≠vel para teste');
        return false;
    }
    
    // Criar reuni√£o
    console.log('   ‚ûï Criando reuni√£o de teste...');
    const meetingData = {
        title: 'Reuni√£o de Teste',
        videoId: testVideoId
    };
    
    const { response: createResponse, data: newMeeting } = await makeRequest('/api/meetings', {
        method: 'POST',
        body: JSON.stringify(meetingData)
    });
    
    if (createResponse && createResponse.ok) {
        testMeetingId = newMeeting.meeting.meetingId;
        console.log('   ‚úÖ Reuni√£o criada com sucesso');
        
        // Listar reuni√µes
        console.log('   üìã Listando reuni√µes...');
        const { response: listResponse, data: meetings } = await makeRequest('/api/meetings');
        
        if (listResponse && listResponse.ok) {
            console.log(`   ‚úÖ ${meetings.length} reuni√µes encontradas`);
        }
        
        return true;
    } else {
        console.log('   ‚ùå Falha ao criar reuni√£o');
        return false;
    }
}

// Teste 5: Tokens de Integra√ß√£o
async function testIntegration() {
    console.log('\n5Ô∏è‚É£ Testando rotas de integra√ß√£o...');
    
    // Listar tokens
    console.log('   üìã Listando tokens de integra√ß√£o...');
    const { response: listResponse, data: tokens } = await makeRequest('/api/integration/tokens');
    
    if (listResponse && listResponse.ok) {
        console.log(`   ‚úÖ ${tokens.length} tokens encontrados`);
        
        if (tokens.length > 0) {
            testTokenId = tokens[0]._id;
        }
    }
    
    // Criar token de teste
    console.log('   ‚ûï Criando token de integra√ß√£o...');
    const tokenData = {
        name: 'Token de Teste',
        description: 'Token para testes de integra√ß√£o',
        website: 'https://teste.com',
        videos: testVideoId ? [{
            video: testVideoId,
            name: 'V√≠deo de Teste',
            isDefault: true
        }] : []
    };
    
    const { response: createResponse, data: newToken } = await makeRequest('/api/integration/tokens', {
        method: 'POST',
        body: JSON.stringify(tokenData)
    });
    
    if (createResponse && createResponse.ok) {
        testTokenId = newToken._id;
        console.log('   ‚úÖ Token criado com sucesso');
        
        // Testar cria√ß√£o de reuni√£o via integra√ß√£o
        console.log('   üéØ Testando cria√ß√£o de reuni√£o via integra√ß√£o...');
        const integrationData = {
            token: newToken.token,
            title: 'Reuni√£o via Integra√ß√£o',
            redirectUrl: 'https://teste.com'
        };
        
        const { response: integrationResponse, data: integrationResult } = await makeRequest('/api/integration/create-meeting', {
            method: 'POST',
            body: JSON.stringify(integrationData)
        });
        
        if (integrationResponse && integrationResponse.ok) {
            console.log('   ‚úÖ Reuni√£o via integra√ß√£o criada com sucesso');
        } else {
            console.log('   ‚ùå Falha ao criar reuni√£o via integra√ß√£o');
        }
        
        return true;
    } else {
        console.log('   ‚ùå Falha ao criar token');
        return false;
    }
}

// Teste 6: Admin (se aplic√°vel)
async function testAdmin() {
    console.log('\n6Ô∏è‚É£ Testando rotas de admin...');
    
    // Verificar se √© admin
    console.log('   üëë Verificando permiss√µes de admin...');
    const { response: meResponse, data: userData } = await makeRequest('/api/auth/me');
    
    if (meResponse && meResponse.ok && userData.isAdmin) {
        console.log('   ‚úÖ Usu√°rio √© admin');
        
        // Listar usu√°rios
        console.log('   üìã Listando usu√°rios...');
        const { response: usersResponse, data: users } = await makeRequest('/api/admin/users');
        
        if (usersResponse && usersResponse.ok) {
            console.log(`   ‚úÖ ${users.length} usu√°rios encontrados`);
        }
        
        // Estat√≠sticas
        console.log('   üìä Buscando estat√≠sticas...');
        const { response: statsResponse, data: stats } = await makeRequest('/api/admin/stats');
        
        if (statsResponse && statsResponse.ok) {
            console.log('   ‚úÖ Estat√≠sticas carregadas');
        }
        
        return true;
    } else {
        console.log('   ‚ö†Ô∏è Usu√°rio n√£o √© admin');
        return true; // N√£o √© erro, apenas n√£o tem permiss√£o
    }
}

// Teste 7: Analytics
async function testAnalytics() {
    console.log('\n7Ô∏è‚É£ Testando rotas de analytics...');
    
    // Estat√≠sticas
    console.log('   üìä Buscando estat√≠sticas...');
    const { response: statsResponse, data: stats } = await makeRequest('/api/analytics/stats');
    
    if (statsResponse && statsResponse.ok) {
        console.log('   ‚úÖ Estat√≠sticas carregadas');
    } else {
        console.log('   ‚ùå Falha ao carregar estat√≠sticas');
    }
    
    // Top usu√°rios
    console.log('   üë• Buscando top usu√°rios...');
    const { response: usersResponse, data: users } = await makeRequest('/api/analytics/top-users');
    
    if (usersResponse && usersResponse.ok) {
        console.log('   ‚úÖ Top usu√°rios carregados');
    } else {
        console.log('   ‚ùå Falha ao carregar top usu√°rios');
    }
    
    return true;
}

// Teste 8: Limpeza
async function testCleanup() {
    console.log('\n8Ô∏è‚É£ Testando limpeza autom√°tica...');
    
    // Executar limpeza manual
    console.log('   üßπ Executando limpeza manual...');
    const { response: cleanupResponse, data: cleanupResult } = await makeRequest('/api/admin/cleanup', {
        method: 'POST'
    });
    
    if (cleanupResponse && cleanupResponse.ok) {
        console.log('   ‚úÖ Limpeza executada com sucesso');
        console.log(`   üìä ${cleanupResult.markedAsExpired} marcadas como expiradas`);
        console.log(`   üóëÔ∏è ${cleanupResult.removedCount} removidas`);
    } else {
        console.log('   ‚ùå Falha na limpeza');
    }
    
    return true;
}

// Fun√ß√£o principal
async function testAllRoutes() {
    console.log('üß™ === TESTE COMPLETO DAS ROTAS DA API ===\n');
    
    try {
        // Teste 1: API online
        const apiOnline = await testApiOnline();
        if (!apiOnline) {
            console.log('‚ùå API n√£o est√° online. Encerrando testes.');
            return;
        }
        
        // Teste 2: Autentica√ß√£o
        const authOk = await testAuth();
        if (!authOk) {
            console.log('‚ùå Falha na autentica√ß√£o. Encerrando testes.');
            return;
        }
        
        // Teste 3: V√≠deos
        const videosOk = await testVideos();
        
        // Teste 4: Reuni√µes
        const meetingsOk = await testMeetings();
        
        // Teste 5: Integra√ß√£o
        const integrationOk = await testIntegration();
        
        // Teste 6: Admin
        const adminOk = await testAdmin();
        
        // Teste 7: Analytics
        const analyticsOk = await testAnalytics();
        
        // Teste 8: Limpeza
        const cleanupOk = await testCleanup();
        
        // Resumo final
        console.log('\nüìã === RESUMO DOS TESTES ===');
        console.log(`‚úÖ API Online: ${apiOnline ? 'Sim' : 'N√£o'}`);
        console.log(`‚úÖ Autentica√ß√£o: ${authOk ? 'Sim' : 'N√£o'}`);
        console.log(`‚úÖ V√≠deos: ${videosOk ? 'Sim' : 'N√£o'}`);
        console.log(`‚úÖ Reuni√µes: ${meetingsOk ? 'Sim' : 'N√£o'}`);
        console.log(`‚úÖ Integra√ß√£o: ${integrationOk ? 'Sim' : 'N√£o'}`);
        console.log(`‚úÖ Admin: ${adminOk ? 'Sim' : 'N√£o'}`);
        console.log(`‚úÖ Analytics: ${analyticsOk ? 'Sim' : 'N√£o'}`);
        console.log(`‚úÖ Limpeza: ${cleanupOk ? 'Sim' : 'N√£o'}`);
        
        const allTests = [apiOnline, authOk, videosOk, meetingsOk, integrationOk, adminOk, analyticsOk, cleanupOk];
        const passedTests = allTests.filter(test => test).length;
        
        console.log(`\nüéØ ${passedTests}/${allTests.length} testes passaram`);
        
        if (passedTests === allTests.length) {
            console.log('üéâ Todos os testes passaram! Sistema funcionando perfeitamente!');
        } else {
            console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error);
    }
}

testAllRoutes();
