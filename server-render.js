// ===== VERS√ÉO COMPLETA - GOOGLE MEET FAKE SAAS =====
// √öLTIMA ATUALIZA√á√ÉO: 14/08/2025 01:35 AM
// VERS√ÉO COMPLETA COM INTERFACE DE LOGIN

const express = require('express');
const cors = require('cors');
const path = require('path');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 10000;

// ===== LOGS INICIAIS =====
console.log('üöÄ VERS√ÉO COMPLETA - GOOGLE MEET FAKE SAAS');
console.log('üìÖ Data/Hora:', new Date().toISOString());
console.log('üìÇ Diret√≥rio atual:', __dirname);
console.log('üìä Porta:', PORT);

// Conectar ao MongoDB
console.log('üîó Conectando ao MongoDB...');
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => {
    console.log('‚úÖ Conectado ao MongoDB com sucesso!');
})
.catch((error) => {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error.message);
    process.exit(1);
});

// Middleware
app.use(cors());
app.use(express.json({ limit: '100mb' }));
app.use(express.urlencoded({ extended: true, limit: '100mb' }));

// ===== MODELOS =====
const User = require('./models/User');
const Meeting = require('./models/Meeting');

// Job de limpeza autom√°tica para encerrar reuni√µes expiradas
async function cleanupExpiredMeetings() {
    try {
        const now = new Date();
        const twentyMinutesAgo = new Date(now.getTime() - (20 * 60 * 1000));
        
        // Encontrar reuni√µes ativas que come√ßaram h√° mais de 20 minutos
        const expiredMeetings = await Meeting.find({
            status: 'active',
            startedAt: { $lt: twentyMinutesAgo }
        });
        
        if (expiredMeetings.length > 0) {
            console.log(`üïê Encontradas ${expiredMeetings.length} reuni√µes expiradas por tempo`);
            
            for (const meeting of expiredMeetings) {
                await meeting.endMeeting();
                console.log(`‚è∞ Reuni√£o ${meeting.meetingId} encerrada automaticamente por timeout`);
            }
        }
    } catch (error) {
        console.error('‚ùå Erro no job de limpeza de reuni√µes:', error);
    }
}

// Executar limpeza a cada 5 minutos
setInterval(cleanupExpiredMeetings, 5 * 60 * 1000);

// Executar limpeza inicial ap√≥s 1 minuto
setTimeout(cleanupExpiredMeetings, 60 * 1000);

// ===== ROTAS =====
const videoRoutes = require('./routes/videos');
const meetingRoutes = require('./routes/meetings');
const userRoutes = require('./routes/users');
const financialRoutes = require('./routes/financial');
const authRoutes = require('./routes/auth');

// ===== FUN√á√ïES DE AUTENTICA√á√ÉO =====
const generateToken = (userId) => {
    return jwt.sign({ userId }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '24h' });
};

const authenticateToken = (req, res, next) => {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ success: false, error: 'Token n√£o fornecido' });
    }

    jwt.verify(token, process.env.JWT_SECRET || 'fallback_secret', (err, user) => {
        if (err) {
            return res.status(403).json({ success: false, error: 'Token inv√°lido' });
        }
        req.user = user;
        next();
    });
};

// ===== ROTAS DE AUTENTICA√á√ÉO =====
// As rotas de autentica√ß√£o est√£o no arquivo routes/auth.js

// Verificar usu√°rio autenticado
app.get('/api/auth/me', authenticateToken, async (req, res) => {
    try {
        const user = await User.findById(req.user.userId).select('-password');
        
        if (!user) {
            return res.status(404).json({
                success: false,
                error: 'Usu√°rio n√£o encontrado'
            });
        }

        res.json({
            success: true,
            user
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar usu√°rio:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// ===== ROTAS DE API =====
app.use('/api/auth', authRoutes);
app.use('/api/videos', videoRoutes);
app.use('/api/meetings', meetingRoutes);
app.use('/api/users', userRoutes);
app.use('/api/financial', financialRoutes);

// ===== ROTAS DE P√ÅGINAS =====

// Rota principal - p√°gina de login
app.get('/', (req, res) => {
    console.log('üì• GET / - P√°gina principal (login) acessada');
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Rota para o Google Meet
app.get('/meet', (req, res) => {
    console.log('üéØ GET /meet - P√°gina do Meet acessada');
    res.sendFile(path.join(__dirname, 'public', 'meet.html'));
});

// Rota para reuni√£o espec√≠fica
app.get('/meet/:meetingId', (req, res) => {
    console.log(`üéØ GET /meet/${req.params.meetingId} - Reuni√£o espec√≠fica acessada`);
    res.sendFile(path.join(__dirname, 'public', 'meet.html'));
});

// Rota para teste de autentica√ß√£o
app.get('/test-auth', (req, res) => {
    console.log('üîê GET /test-auth - P√°gina de teste de auth acessada');
    res.sendFile(path.join(__dirname, 'public', 'test-auth.html'));
});

// Rota para p√°gina de compra de tokens
app.get('/comprar-tokens', (req, res) => {
    console.log('üí∞ GET /comprar-tokens - P√°gina de compra de tokens acessada');
    res.sendFile(path.join(__dirname, 'public', 'comprar-tokens.html'));
});

// Rota para p√°gina de reset de senha
app.get('/reset-password', (req, res) => {
    console.log('üîë GET /reset-password - P√°gina de reset de senha acessada');
    res.sendFile(path.join(__dirname, 'public', 'reset-password.html'));
});

// ===== ARQUIVOS EST√ÅTICOS =====
app.use(express.static('public'));
app.use('/images', express.static(path.join(__dirname, 'public', 'images')));
app.use('/favicon.ico', express.static(path.join(__dirname, 'public', 'favicon.ico')));
app.use('/css', express.static(path.join(__dirname, 'public', 'css')));
app.use('/js', express.static(path.join(__dirname, 'public', 'js')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Middleware para verificar se arquivo existe
app.use('/uploads/*', (req, res, next) => {
    const fs = require('fs');
    const filePath = path.join(__dirname, 'uploads', req.params[0]);
    console.log('üìÅ Verificando arquivo:', filePath);
    console.log('üìÅ Arquivo existe:', fs.existsSync(filePath));
    next();
});

// ===== ROTA DE TESTE DA API =====
app.get('/api/test', (req, res) => {
    console.log('üì• GET /api/test - API de teste acessada');
    res.json({
        message: '‚úÖ API funcionando - VERS√ÉO COMPLETA!',
        timestamp: new Date().toISOString(),
        version: 'COMPLETA - 14/08/2025 01:35 AM',
        database: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
    });
});

// Tratamento de erros
app.use((err, req, res, next) => {
    console.error('‚ùå Erro:', err);
    res.status(500).json({
        error: 'Erro interno do servidor',
        message: err.message
    });
});

// Rota 404
app.use('*', (req, res) => {
    console.log(`‚ùå Rota n√£o encontrada: ${req.originalUrl}`);
    res.status(404).json({
        error: 'Rota n√£o encontrada',
        path: req.originalUrl,
        version: 'COMPLETA - 14/08/2025 01:35 AM'
    });
});

// Iniciar servidor
console.log('üîß CONFIGURANDO SERVIDOR...');
const server = app.listen(PORT, '0.0.0.0', () => {
    console.log('üöÄüöÄüöÄ SERVIDOR COMPLETO INICIADO! üöÄüöÄüöÄ');
    console.log('üìÖ VERS√ÉO: COMPLETA - 14/08/2025 01:35 AM');
    console.log(`üì± URL: http://localhost:${PORT}`);
    console.log(`üìã API: http://localhost:${PORT}/api/test`);
    console.log(`üéØ Meet: http://localhost:${PORT}/meet`);
    console.log(`üîê Test Auth: http://localhost:${PORT}/test-auth`);
    console.log(`‚öôÔ∏è  Ambiente: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üåê Porta: ${PORT}`);
    console.log(`üîç Host: 0.0.0.0`);
    console.log(`‚úÖ Servidor pronto para receber conex√µes!`);
    console.log(`üéâ Deploy bem-sucedido!`);
    console.log(`üóÑÔ∏è  Banco de dados: MongoDB`);
    console.log(`üìÅ Vers√£o: COMPLETA COM INTERFACE`);
});

// Tratamento de erros do servidor
server.on('error', (err) => {
    console.error('‚ùå Erro no servidor:', err);
    if (err.code === 'EADDRINUSE') {
        console.error('‚ùå Porta j√° est√° em uso:', PORT);
    }
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë Recebido SIGTERM, encerrando servidor...');
    server.close(() => {
        console.log('‚úÖ Servidor encerrado.');
        mongoose.connection.close()
            .then(() => {
                console.log('‚úÖ Conex√£o com MongoDB fechada.');
                process.exit(0);
            })
            .catch((error) => {
                console.log('‚ö†Ô∏è Erro ao fechar conex√£o MongoDB:', error.message);
                process.exit(0);
            });
    });
}); 