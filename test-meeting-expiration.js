const mongoose = require('mongoose');
require('dotenv').config();

// Conectar ao MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/google-meet-fake', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const Meeting = require('./models/Meeting');
const User = require('./models/User');
const Video = require('./models/Video');

async function testMeetingExpiration() {
    try {
        console.log('üß™ Testando expira√ß√£o de reuni√µes...\n');

        // 1. Verificar reuni√µes existentes
        const meetings = await Meeting.find().populate('video creator');
        console.log(`üìä Total de reuni√µes: ${meetings.length}`);

        if (meetings.length === 0) {
            console.log('‚ùå Nenhuma reuni√£o encontrada para testar');
            return;
        }

        // 2. Testar cada reuni√£o
        for (const meeting of meetings) {
            console.log(`\nüîç Testando reuni√£o: ${meeting.meetingId}`);
            console.log(`   - Status: ${meeting.status}`);
            console.log(`   - Criada em: ${meeting.createdAt.toLocaleString('pt-BR')}`);
            console.log(`   - Iniciada em: ${meeting.startedAt ? meeting.startedAt.toLocaleString('pt-BR') : 'N√£o iniciada'}`);
            console.log(`   - Encerrada em: ${meeting.endedAt ? meeting.endedAt.toLocaleString('pt-BR') : 'N√£o encerrada'}`);
            console.log(`   - Dura√ß√£o m√°xima: ${meeting.maxDuration / 1000 / 60} minutos`);

            // Testar acesso com IP do criador
            const creatorAccess = meeting.canAccess(meeting.creatorIP);
            console.log(`   - Acesso do criador (${meeting.creatorIP}): ${creatorAccess ? '‚úÖ Permitido' : '‚ùå Negado'}`);

            // Testar acesso com IP diferente
            const otherIP = '192.168.1.100';
            const otherAccess = meeting.canAccess(otherIP);
            console.log(`   - Acesso de outro IP (${otherIP}): ${otherAccess ? '‚úÖ Permitido' : '‚ùå Negado'}`);

            // Verificar se expirou por tempo
            const isExpired = meeting.isExpired();
            console.log(`   - Expirou por tempo: ${isExpired ? '‚úÖ Sim' : '‚ùå N√£o'}`);

            // Testar autoriza√ß√£o de acesso
            const accessResult = meeting.authorizeAccess(meeting.creatorIP);
            console.log(`   - Resultado autoriza√ß√£o: ${accessResult.authorized ? '‚úÖ Autorizado' : '‚ùå Negado'}`);
            if (!accessResult.authorized) {
                console.log(`     - Motivo: ${accessResult.reason}`);
            }
        }

        // 3. Criar reuni√£o de teste expirada
        console.log('\nüß™ Criando reuni√£o de teste expirada...');
        
        const testUser = await User.findOne();
        const testVideo = await Video.findOne();
        
        if (!testUser || !testVideo) {
            console.log('‚ùå Usu√°rio ou v√≠deo n√£o encontrado para teste');
            return;
        }

        const expiredMeeting = new Meeting({
            meetingId: 'test-expired-' + Math.random().toString(36).substr(2, 9),
            title: 'Reuni√£o de Teste Expirada',
            video: testVideo._id,
            creator: testUser._id,
            meetLink: 'http://localhost:3000/meet/test-expired',
            creatorIP: '127.0.0.1',
            status: 'active',
            startedAt: new Date(Date.now() - (25 * 60 * 1000)), // 25 minutos atr√°s
            maxDuration: 20 * 60 * 1000 // 20 minutos
        });

        await expiredMeeting.save();
        console.log('‚úÖ Reuni√£o expirada criada:', expiredMeeting.meetingId);

        // 4. Testar reuni√£o expirada
        console.log('\nüîç Testando reuni√£o expirada...');
        console.log(`   - Status: ${expiredMeeting.status}`);
        console.log(`   - Iniciada em: ${expiredMeeting.startedAt.toLocaleString('pt-BR')}`);
        console.log(`   - Dura√ß√£o m√°xima: ${expiredMeeting.maxDuration / 1000 / 60} minutos`);
        
        const isExpired = expiredMeeting.isExpired();
        console.log(`   - Expirou por tempo: ${isExpired ? '‚úÖ Sim' : '‚ùå N√£o'}`);

        const accessBefore = expiredMeeting.canAccess(expiredMeeting.creatorIP);
        console.log(`   - Acesso antes da verifica√ß√£o: ${accessBefore ? '‚úÖ Permitido' : '‚ùå Negado'}`);

        // Simular verifica√ß√£o de acesso que deve marcar como expirada
        const accessAfter = expiredMeeting.canAccess(expiredMeeting.creatorIP);
        console.log(`   - Acesso ap√≥s verifica√ß√£o: ${accessAfter ? '‚úÖ Permitido' : '‚ùå Negado'}`);
        console.log(`   - Status ap√≥s verifica√ß√£o: ${expiredMeeting.status}`);

        // 5. Testar encerramento manual
        console.log('\nüß™ Testando encerramento manual...');
        await expiredMeeting.endMeeting();
        console.log(`   - Status ap√≥s encerramento: ${expiredMeeting.status}`);
        console.log(`   - Encerrada em: ${expiredMeeting.endedAt.toLocaleString('pt-BR')}`);

        const accessAfterEnd = expiredMeeting.canAccess(expiredMeeting.creatorIP);
        console.log(`   - Acesso ap√≥s encerramento: ${accessAfterEnd ? '‚úÖ Permitido' : '‚ùå Negado'}`);

        // 6. Limpar reuni√£o de teste
        await Meeting.findByIdAndDelete(expiredMeeting._id);
        console.log('‚úÖ Reuni√£o de teste removida');

        console.log('\n‚úÖ Teste de expira√ß√£o conclu√≠do!');

    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    } finally {
        mongoose.connection.close();
    }
}

testMeetingExpiration();
