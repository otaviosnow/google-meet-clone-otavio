const express = require('express');
const { authenticateToken } = require('../middleware/auth');
const Meeting = require('../models/Meeting');
const Video = require('../models/Video');
const User = require('../models/User');
const TokenUsage = require('../models/TokenUsage');

const router = express.Router();

// Criar nova reuni√£o
router.post('/', authenticateToken, async (req, res) => {
    try {
        const { title, videoId } = req.body;
        
        if (!title || !videoId) {
            return res.status(400).json({ error: 'T√≠tulo e v√≠deo s√£o obrigat√≥rios' });
        }

        // Verificar se o v√≠deo existe e pertence ao usu√°rio
        const video = await Video.findOne({ _id: videoId, user: req.user._id });
        if (!video) {
            return res.status(404).json({ error: 'V√≠deo n√£o encontrado' });
        }

        // Gerar ID da reuni√£o
        const meetingId = 'meet-' + Math.random().toString(36).substr(2, 9);
        const meetLink = `${req.protocol}://${req.get('host')}/meet/${meetingId}`;
        
        // Obter IP do criador
        const creatorIP = req.ip || req.connection.remoteAddress;

        const meeting = new Meeting({
            meetingId: meetingId,
            title,
            description: '',
            video: videoId,
            creator: req.user._id,
            meetLink: meetLink,
            creatorIP: creatorIP,
            status: 'active'
        });

        await meeting.save();

        // Descontar 1 token do usu√°rio
        const user = await User.findById(req.user._id);
        if (user.visionTokens < 1) {
            return res.status(400).json({ 
                error: 'Tokens insuficientes. Voc√™ precisa de 1 token para criar uma reuni√£o.',
                needsTokens: true,
                tokenPrice: 2.00
            });
        }
        
        user.visionTokens -= 1;
        await user.save();

        // Registrar uso de tokens
        console.log('üìù [MEETING] Registrando uso de tokens...');
        console.log('   - User ID:', req.user._id);
        console.log('   - Meeting ID:', meeting._id);
        console.log('   - Tokens to use:', 1);
        
        const tokenUsage = new TokenUsage({
            user: req.user._id,
            meeting: meeting._id,
            tokensUsed: 1,
            action: 'meeting_created',
            description: `Cria√ß√£o da reuni√£o: ${title}`
        });
        
        console.log('üìù [MEETING] TokenUsage criado, salvando...');
        await tokenUsage.save();
        console.log('‚úÖ [MEETING] TokenUsage salvo com sucesso - ID:', tokenUsage._id);

        console.log(`‚úÖ Reuni√£o criada: ${meetingId} - Tokens descontados: ${user.visionTokens + 1} ‚Üí ${user.visionTokens}`);

        // Popular dados do v√≠deo para retorno
        await meeting.populate('video', 'title url type');

        res.status(201).json({
            message: 'Reuni√£o criada com sucesso',
            meeting: meeting,
            tokensRemaining: user.visionTokens
        });

    } catch (error) {
        console.error('Erro ao criar reuni√£o:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Obter reuni√£o por ID
router.get('/:meetingId', async (req, res) => {
    try {
        const { meetingId } = req.params;
        const userIP = req.ip || req.connection.remoteAddress;

        console.log(`üîç Buscando reuni√£o: ${meetingId} - IP: ${userIP}`);

        const meeting = await Meeting.findOne({ meetingId }).populate('video', 'title url type');
        
        if (!meeting) {
            return res.status(404).json({ error: 'Reuni√£o n√£o encontrada' });
        }

        // Verificar se o IP pode acessar a reuni√£o
        if (!meeting.canAccess(userIP)) {
            console.log(`‚ùå Acesso negado para IP: ${userIP} - Reuni√£o: ${meetingId}`);
            return res.status(403).json({ 
                error: 'Acesso negado. Esta reuni√£o j√° est√° sendo utilizada por outra pessoa ou foi encerrada.' 
            });
        }

        // Autorizar acesso
        const accessResult = meeting.authorizeAccess(userIP);
        
        if (!accessResult.authorized) {
            console.log(`‚ùå Acesso n√£o autorizado: ${accessResult.reason}`);
            return res.status(403).json({ error: accessResult.reason });
        }

        await meeting.save();

        console.log(`‚úÖ Reuni√£o acessada: ${meetingId} - IP: ${userIP} - Criador: ${accessResult.isCreator}`);

        res.json({
            meeting: meeting,
            accessInfo: {
                isCreator: accessResult.isCreator,
                isFirstAdditional: accessResult.isFirstAdditional || false
            }
        });

    } catch (error) {
        console.error('Erro ao buscar reuni√£o:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Listar reuni√µes do usu√°rio
router.get('/', authenticateToken, async (req, res) => {
    try {
        const meetings = await Meeting.find({ creator: req.user._id })
            .populate('video', 'title url type')
            .sort({ createdAt: -1 });

        res.json(meetings);
    } catch (error) {
        console.error('Erro ao listar reuni√µes:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Encerrar reuni√£o
router.post('/:meetingId/end', authenticateToken, async (req, res) => {
    try {
        const { meetingId } = req.params;
        
        const meeting = await Meeting.findOne({ meetingId, creator: req.user._id });
        
        if (!meeting) {
            return res.status(404).json({ error: 'Reuni√£o n√£o encontrada' });
        }

        await meeting.endMeeting();
        
        console.log(`üîö Reuni√£o encerrada: ${meetingId}`);
        
        res.json({ message: 'Reuni√£o encerrada com sucesso' });
    } catch (error) {
        console.error('Erro ao encerrar reuni√£o:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Atualizar dura√ß√£o do v√≠deo (sem autentica√ß√£o)
router.post('/:meetingId/video-duration', async (req, res) => {
    try {
        const { meetingId } = req.params;
        const { duration, durationMs } = req.body;
        
        console.log(`‚è±Ô∏è Recebendo dura√ß√£o do v√≠deo para reuni√£o: ${meetingId}`);
        console.log(`   - Dura√ß√£o: ${duration} segundos`);
        console.log(`   - Dura√ß√£o (ms): ${durationMs} ms`);
        
        const meeting = await Meeting.findOne({ meetingId });
        
        if (!meeting) {
            return res.status(404).json({ error: 'Reuni√£o n√£o encontrada' });
        }

        // Atualizar a dura√ß√£o do v√≠deo
        await meeting.updateVideoDuration(durationMs);
        
        console.log(`‚úÖ Dura√ß√£o do v√≠deo atualizada: ${meetingId} - ${duration} segundos`);
        
        res.json({ 
            message: 'Dura√ß√£o do v√≠deo atualizada com sucesso',
            duration: duration,
            durationMs: durationMs
        });
    } catch (error) {
        console.error('Erro ao atualizar dura√ß√£o do v√≠deo:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Encerrar reuni√£o quando v√≠deo termina (sem autentica√ß√£o)
router.post('/:meetingId/end-video', async (req, res) => {
    try {
        const { meetingId } = req.params;
        
        const meeting = await Meeting.findOne({ meetingId });
        
        if (!meeting) {
            return res.status(404).json({ error: 'Reuni√£o n√£o encontrada' });
        }

        await meeting.endByVideoCompletion();
        
        console.log(`üé¨ Reuni√£o encerrada por t√©rmino do v√≠deo: ${meetingId}`);
        
        res.json({ message: 'Reuni√£o encerrada com sucesso' });
    } catch (error) {
        console.error('Erro ao encerrar reuni√£o por v√≠deo:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Deletar reuni√£o
router.delete('/:id', authenticateToken, async (req, res) => {
    try {
        const meeting = await Meeting.findOne({ _id: req.params.id, creator: req.user._id });
        
        if (!meeting) {
            return res.status(404).json({ error: 'Reuni√£o n√£o encontrada' });
        }

        await meeting.deleteOne();
        res.json({ message: 'Reuni√£o deletada com sucesso' });
    } catch (error) {
        console.error('Erro ao deletar reuni√£o:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

module.exports = router; 