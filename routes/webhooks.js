const express = require('express');
const mercadopago = require('mercadopago');
const Transaction = require('../models/Transaction');
const User = require('../models/User');
const router = express.Router();

// Configurar Mercado Pago
mercadopago.configure({
  access_token: process.env.MERCADOPAGO_ACCESS_TOKEN
});

// POST /api/webhooks/mercadopago - Webhook do Mercado Pago
router.post('/mercadopago', async (req, res) => {
  try {
    console.log('üîç [WEBHOOK] ===== WEBHOOK RECEBIDO =====');
    console.log('üîç [WEBHOOK] Headers:', req.headers);
    console.log('üîç [WEBHOOK] Body:', JSON.stringify(req.body, null, 2));
    
    const { type, data } = req.body;
    
    console.log('üîç [WEBHOOK] Tipo:', type);
    console.log('üîç [WEBHOOK] Dados:', data);
    
    // Verificar se √© um evento de pagamento
    if (type !== 'payment') {
      console.log('‚ö†Ô∏è [WEBHOOK] Tipo n√£o √© payment, ignorando:', type);
      return res.status(200).json({ received: true });
    }
    
    // Buscar detalhes do pagamento no Mercado Pago
    const payment = await mercadopago.payment.get(data.id);
    
    console.log('üîç [WEBHOOK] Pagamento encontrado:', {
      id: payment.body.id,
      status: payment.body.status,
      status_detail: payment.body.status_detail,
      external_reference: payment.body.external_reference
    });
    
    // Buscar transa√ß√£o no banco
    const transaction = await Transaction.findOne({
      mercadopagoId: payment.body.id.toString()
    });
    
    if (!transaction) {
      console.error('‚ùå [WEBHOOK] Transa√ß√£o n√£o encontrada para payment ID:', payment.body.id);
      return res.status(404).json({ error: 'Transa√ß√£o n√£o encontrada' });
    }
    
    console.log('üîç [WEBHOOK] Transa√ß√£o encontrada:', {
      id: transaction._id,
      status: transaction.status,
      userId: transaction.user
    });
    
    // Verificar se o status mudou
    if (payment.body.status === transaction.status) {
      console.log('‚ÑπÔ∏è [WEBHOOK] Status n√£o mudou, ignorando');
      return res.status(200).json({ received: true });
    }
    
    // Atualizar status da transa√ß√£o
    transaction.status = payment.body.status;
    
    if (payment.body.status === 'approved') {
      console.log('‚úÖ [WEBHOOK] Pagamento aprovado!');
      
      transaction.paidAt = new Date();
      
      // Creditar tokens ao usu√°rio
      const user = await User.findById(transaction.user);
      if (user) {
        user.visionTokens += transaction.tokens;
        await user.save();
        
        console.log('‚úÖ [WEBHOOK] Tokens creditados:', {
          userId: user._id,
          tokensAdicionados: transaction.tokens,
          tokensTotal: user.visionTokens
        });
      } else {
        console.error('‚ùå [WEBHOOK] Usu√°rio n√£o encontrado:', transaction.user);
      }
    } else if (payment.body.status === 'rejected') {
      console.log('‚ùå [WEBHOOK] Pagamento rejeitado');
    } else if (payment.body.status === 'cancelled') {
      console.log('‚ö†Ô∏è [WEBHOOK] Pagamento cancelado');
    }
    
    await transaction.save();
    
    console.log('‚úÖ [WEBHOOK] Transa√ß√£o atualizada:', {
      id: transaction._id,
      novoStatus: transaction.status
    });
    
    res.status(200).json({ received: true });
    
  } catch (error) {
    console.error('‚ùå [WEBHOOK] Erro ao processar webhook:', error);
    console.error('‚ùå [WEBHOOK] Stack trace:', error.stack);
    
    // Sempre retornar 200 para o Mercado Pago n√£o reenviar
    res.status(200).json({ error: 'Erro interno' });
  }
});

module.exports = router;
