const express = require('express');
const { body, validationResult } = require('express-validator');
const User = require('../models/User');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');

// Middleware de autentica√ß√£o compat√≠vel com o servidor principal
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ success: false, error: 'Token n√£o fornecido' });
    }

    jwt.verify(token, process.env.JWT_SECRET || 'fallback_secret', (err, decoded) => {
        if (err) {
            return res.status(403).json({ success: false, error: 'Token inv√°lido' });
        }
        req.user = { _id: decoded.userId };
        next();
    });
};

// Fun√ß√£o para gerar token JWT
const generateToken = (userId) => {
    return jwt.sign({ userId }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '24h' });
};

const router = express.Router();

// Valida√ß√µes para registro
const registerValidation = [
  body('name')
    .trim()
    .isLength({ min: 2, max: 50 })
    .withMessage('Nome deve ter entre 2 e 50 caracteres'),
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email inv√°lido'),

  body('password')
    .isLength({ min: 6 })
    .withMessage('Senha deve ter pelo menos 6 caracteres')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .withMessage('Senha deve conter pelo menos uma letra mai√∫scula, uma min√∫scula e um n√∫mero')
];

// Valida√ß√µes para login
const loginValidation = [
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email inv√°lido'),
  body('password')
    .notEmpty()
    .withMessage('Senha √© obrigat√≥ria')
];

// Valida√ß√µes para recupera√ß√£o de senha
const forgotPasswordValidation = [
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email inv√°lido')
];

const resetPasswordValidation = [
  body('token')
    .notEmpty()
    .withMessage('Token √© obrigat√≥rio'),
  body('password')
    .isLength({ min: 6 })
    .withMessage('Senha deve ter pelo menos 6 caracteres')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .withMessage('Senha deve conter pelo menos uma letra mai√∫scula, uma min√∫scula e um n√∫mero')
];

// Middleware para verificar erros de valida√ß√£o
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      error: 'Dados inv√°lidos',
      details: errors.array().map(err => ({
        field: err.path,
        message: err.msg
      }))
    });
  }
  next();
};

// POST /api/auth/register - Registrar novo usu√°rio
router.post('/register', registerValidation, handleValidationErrors, async (req, res) => {
  try {
    console.log('üìù === IN√çCIO DO REGISTRO ===');
    console.log('üìÖ Timestamp:', new Date().toISOString());
    console.log('üåê IP:', req.ip || req.connection.remoteAddress);
    console.log('üë§ User-Agent:', req.get('User-Agent'));
    
    const { name, email, password } = req.body;
    
    console.log('üìã Dados recebidos:');
    console.log('   üë§ Nome:', name);
    console.log('   üìß Email:', email);
    console.log('   üîë Senha:', password ? 'Fornecida' : 'N√£o fornecida');
    console.log('   üìß Email normalizado:', email ? email.toLowerCase().trim() : 'N/A');

    // Verificar se o email j√° existe
    console.log('\nüîç Verificando se email j√° existe...');
    const existingUserByEmail = await User.findOne({ email });
    
    if (existingUserByEmail) {
      console.log('‚ùå Email j√° existe no banco:');
      console.log('   üë§ Nome existente:', existingUserByEmail.name);
      console.log('   üìß Email existente:', existingUserByEmail.email);
      console.log('   ‚úÖ Ativo:', existingUserByEmail.isActive);
      console.log('   üëë Admin:', existingUserByEmail.isAdmin);
      console.log('   üìÖ Criado em:', existingUserByEmail.createdAt);
      
      return res.status(400).json({
        error: 'Email j√° est√° em uso'
      });
    }
    

    
    console.log('‚úÖ Email n√£o existe, prosseguindo com registro...');

    // Criar novo usu√°rio
    console.log('\nüÜï Criando novo usu√°rio...');
    const user = new User({
      name,
      email,
      password
    });
    
    console.log('üìã Dados do usu√°rio antes de salvar:');
    console.log('   üë§ Nome:', user.name);
    console.log('   üìß Email:', user.email);
    console.log('   üîë Senha hash:', user.password ? 'Sim' : 'N√£o');
    console.log('   ‚úÖ Ativo:', user.isActive);
    console.log('   üëë Admin:', user.isAdmin);
    console.log('   üé´ Tokens:', user.visionTokens);

    // Salvar no banco de dados
    console.log('\nüíæ Salvando no MongoDB...');
    await user.save();
    
    console.log('‚úÖ Usu√°rio salvo com sucesso!');
    console.log('üÜî ID gerado:', user._id);
    console.log('üìÖ Criado em:', user.createdAt);

    // Gerar token
    console.log('\nüé´ Gerando token JWT...');
    const token = generateToken(user._id);
    console.log('‚úÖ Token gerado:', token ? 'Sim' : 'N√£o');

    // Verificar se o usu√°rio foi realmente salvo no banco
    console.log('\nüîç Verificando se usu√°rio foi salvo no banco...');
    const savedUser = await User.findById(user._id);
    
    if (savedUser) {
      console.log('‚úÖ Usu√°rio confirmado no banco:');
      console.log('   üë§ Nome:', savedUser.name);
      console.log('   üìß Email:', savedUser.email);
      console.log('   ‚úÖ Ativo:', savedUser.isActive);
      console.log('   üëë Admin:', savedUser.isAdmin);
      console.log('   üé´ Tokens:', savedUser.visionTokens);
      console.log('   üìÖ Criado em:', savedUser.createdAt);
    } else {
      console.log('‚ùå ERRO: Usu√°rio n√£o encontrado no banco ap√≥s salvar!');
    }

    // Contar total de usu√°rios no banco
    const totalUsers = await User.countDocuments();
    console.log('üìä Total de usu√°rios no banco:', totalUsers);

    // Retornar dados do usu√°rio (sem senha) e token
    console.log('\nüì§ Enviando resposta de sucesso...');
    res.status(201).json({
      message: 'Usu√°rio registrado com sucesso',
      user: user.toPublicJSON(),
      token
    });
    
    console.log('‚úÖ === REGISTRO CONCLU√çDO COM SUCESSO ===\n');

  } catch (error) {
    console.error('‚ùå === ERRO NO REGISTRO ===');
    console.error('üìÖ Timestamp:', new Date().toISOString());
    console.error('üåê IP:', req.ip || req.connection.remoteAddress);
    console.error('üìß Email tentado:', req.body.email);
    console.error('üë§ Nome tentado:', req.body.name);
    console.error('üîç Tipo de erro:', error.name);
    console.error('üìÑ Mensagem:', error.message);
    console.error('üìä Stack:', error.stack);
    
    if (error.code === 11000) {
      console.error('‚ùå Erro de duplica√ß√£o (c√≥digo 11000)');
      return res.status(400).json({
        error: 'Email j√° est√° em uso'
      });
    }

    console.error('‚ùå === FIM DO ERRO ===\n');
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

// POST /api/auth/login - Login do usu√°rio
router.post('/login', loginValidation, handleValidationErrors, async (req, res) => {
  try {
    console.log('üîê [AUTH-LOGIN] Iniciando login...');
    const { email, password } = req.body;
    console.log(`   - Email: ${email}`);
    console.log(`   - Senha: ${password ? 'Fornecida' : 'N√£o fornecida'}`);

    // Buscar usu√°rio com senha
    const user = await User.findOne({ email }).select('+password');
    
    if (!user) {
      console.log('‚ùå [AUTH-LOGIN] Usu√°rio n√£o encontrado');
      return res.status(401).json({
        error: 'Email ou senha incorretos'
      });
    }

    console.log('‚úÖ [AUTH-LOGIN] Usu√°rio encontrado:');
    console.log(`   - ID: ${user._id}`);
    console.log(`   - Nome: ${user.name}`);
    console.log(`   - Email: ${user.email}`);
    console.log(`   - Tokens: ${user.visionTokens}`);
    console.log(`   - Admin: ${user.isAdmin}`);
    console.log(`   - Ativo: ${user.isActive}`);
    console.log(`   - Senha hash: ${user.password ? 'Presente' : 'Ausente'}`);

    if (!user.isActive) {
      console.log('‚ùå [AUTH-LOGIN] Usu√°rio desativado');
      return res.status(401).json({
        error: 'Conta desativada'
      });
    }

    // Verificar senha
    console.log('üîê [AUTH-LOGIN] Verificando senha...');
    const isPasswordValid = await user.comparePassword(password);
    console.log(`   - Senha v√°lida: ${isPasswordValid}`);
    
    if (!isPasswordValid) {
      console.log('‚ùå [AUTH-LOGIN] Senha inv√°lida');
      return res.status(401).json({
        error: 'Email ou senha incorretos'
      });
    }

    // Atualizar √∫ltimo login
    console.log('üìÖ [AUTH-LOGIN] Atualizando √∫ltimo login...');
    await user.updateLastLogin();

    // Gerar token
    const token = generateToken(user._id);
    console.log('üé´ [AUTH-LOGIN] Token gerado');

    // Retornar dados do usu√°rio e token
    const publicData = user.toPublicJSON();
    console.log('üì§ [AUTH-LOGIN] Dados p√∫blicos:');
    console.log(`   - Tokens: ${publicData.visionTokens}`);
    console.log(`   - Admin: ${publicData.isAdmin}`);

    res.json({
      message: 'Login realizado com sucesso',
      user: publicData,
      token
    });
    
    console.log('‚úÖ [AUTH-LOGIN] Login conclu√≠do com sucesso');

  } catch (error) {
    console.error('Erro no login:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

// POST /api/auth/forgot-password - Solicitar recupera√ß√£o de senha
router.post('/forgot-password', forgotPasswordValidation, handleValidationErrors, async (req, res) => {
  try {
    const { email } = req.body;

    // Buscar usu√°rio
    const user = await User.findOne({ email });
    
    if (!user) {
      // Por seguran√ßa, n√£o revelar se o email existe ou n√£o
      return res.json({
        message: 'Se o email existir, voc√™ receber√° um link para redefinir sua senha'
      });
    }

    if (!user.isActive) {
      return res.status(400).json({
        error: 'Conta desativada'
      });
    }

    // Gerar token de reset
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hora

    // Salvar token no usu√°rio
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = resetTokenExpiry;
    await user.save();

    // Em produ√ß√£o, aqui voc√™ enviaria um email
    // Por enquanto, vamos retornar o token para teste
    res.json({
      message: 'Link de recupera√ß√£o enviado para seu email',
      resetToken: resetToken, // Remover em produ√ß√£o
      resetUrl: `${req.protocol}://${req.get('host')}/reset-password?token=${resetToken}`
    });

  } catch (error) {
    console.error('Erro na recupera√ß√£o de senha:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

// POST /api/auth/reset-password - Redefinir senha
router.post('/reset-password', resetPasswordValidation, handleValidationErrors, async (req, res) => {
  try {
    const { token, password } = req.body;

    // Buscar usu√°rio pelo token
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({
        error: 'Token inv√°lido ou expirado'
      });
    }

    // Atualizar senha
    user.password = password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    res.json({
      message: 'Senha redefinida com sucesso'
    });

  } catch (error) {
    console.error('Erro ao redefinir senha:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

// GET /api/auth/me - Obter dados do usu√°rio atual
router.get('/me', async (req, res) => {
  try {
    console.log('üîç [AUTH-ME] Iniciando rota /me');
    
    // Pegar token do header
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      console.log('‚ùå [AUTH-ME] Token n√£o fornecido');
      return res.status(401).json({
        error: 'Token n√£o fornecido'
      });
    }

    // Verificar token
    const jwt = require('jsonwebtoken');
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ [AUTH-ME] Token v√°lido, userId:', decoded.userId);
    
    // Buscar usu√°rio
    const user = await User.findById(decoded.userId).select('-password');
    
    if (!user) {
      console.log('‚ùå [AUTH-ME] Usu√°rio n√£o encontrado');
      return res.status(401).json({
        error: 'Usu√°rio n√£o encontrado'
      });
    }

    console.log('üë§ [AUTH-ME] Usu√°rio encontrado:');
    console.log('   - ID:', user._id);
    console.log('   - Nome:', user.name);
    console.log('   - Email:', user.email);
    console.log('   - Tokens (banco):', user.visionTokens);
    console.log('   - Admin:', user.isAdmin);
    console.log('   - Ativo:', user.isActive);

    if (!user.isActive) {
      console.log('‚ùå [AUTH-ME] Usu√°rio desativado');
      return res.status(401).json({
        error: 'Usu√°rio desativado'
      });
    }

    const publicData = user.toPublicJSON();
    console.log('üì§ [AUTH-ME] Dados p√∫blicos:');
    console.log('   - Tokens (toPublicJSON):', publicData.visionTokens);

    res.json({
      user: publicData
    });
    
    console.log('‚úÖ [AUTH-ME] Resposta enviada');

  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        error: 'Token inv√°lido'
      });
    }
    
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        error: 'Token expirado'
      });
    }

    console.error('Erro ao obter dados do usu√°rio:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

// POST /api/auth/verify-admin - Verificar se usu√°rio √© admin
router.post('/verify-admin', async (req, res) => {
  try {
    console.log('üîê [AUTH-VERIFY-ADMIN] Iniciando verifica√ß√£o de admin...');
    
    // Pegar token do header
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      console.log('‚ùå [AUTH-VERIFY-ADMIN] Token n√£o fornecido');
      return res.status(401).json({
        error: 'Token n√£o fornecido'
      });
    }

    // Verificar token
    const jwt = require('jsonwebtoken');
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ [AUTH-VERIFY-ADMIN] Token v√°lido, userId:', decoded.userId);
    
    // Buscar usu√°rio
    const user = await User.findById(decoded.userId).select('+password');
    
    if (!user) {
      console.log('‚ùå [AUTH-VERIFY-ADMIN] Usu√°rio n√£o encontrado');
      return res.status(401).json({
        error: 'Usu√°rio n√£o encontrado'
      });
    }

    console.log('üë§ [AUTH-VERIFY-ADMIN] Usu√°rio encontrado:');
    console.log('   - ID:', user._id);
    console.log('   - Nome:', user.name);
    console.log('   - Email:', user.email);
    console.log('   - Admin:', user.isAdmin);
    console.log('   - Ativo:', user.isActive);

    if (!user.isActive) {
      console.log('‚ùå [AUTH-VERIFY-ADMIN] Usu√°rio desativado');
      return res.status(401).json({
        error: 'Usu√°rio desativado'
      });
    }

    if (!user.isAdmin) {
      console.log('‚ùå [AUTH-VERIFY-ADMIN] Usu√°rio n√£o √© admin');
      return res.status(403).json({
        error: 'Acesso negado - Usu√°rio n√£o √© admin'
      });
    }

    // Verificar senha se fornecida
    const { password } = req.body;
    if (password) {
      console.log('üîê [AUTH-VERIFY-ADMIN] Verificando senha...');
      const isPasswordValid = await user.comparePassword(password);
      console.log('   - Senha v√°lida:', isPasswordValid);
      
      if (!isPasswordValid) {
        console.log('‚ùå [AUTH-VERIFY-ADMIN] Senha incorreta');
        return res.status(401).json({
          error: 'Senha incorreta'
        });
      }
    }

    console.log('‚úÖ [AUTH-VERIFY-ADMIN] Verifica√ß√£o de admin bem-sucedida');
    res.json({
      message: 'Acesso admin confirmado',
      user: user.toPublicJSON()
    });

  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        error: 'Token inv√°lido'
      });
    }
    
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        error: 'Token expirado'
      });
    }

    console.error('Erro ao verificar admin:', error);
    res.status(500).json({
      error: 'Erro interno do servidor'
    });
  }
});

// POST /api/auth/logout - Logout (opcional, pois o token √© gerenciado no frontend)
router.post('/logout', (req, res) => {
  res.json({
    message: 'Logout realizado com sucesso'
  });
});

module.exports = router; 