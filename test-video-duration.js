const mongoose = require('mongoose');
const Meeting = require('./models/Meeting');

// Conectar ao MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/google-meet-fake', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

async function testVideoDuration() {
    try {
        console.log('üß™ Testando funcionalidade de dura√ß√£o do v√≠deo...\n');
        
        // Buscar reuni√µes existentes
        const meetings = await Meeting.find({}).limit(5);
        console.log(`üìä Encontradas ${meetings.length} reuni√µes para teste\n`);
        
        if (meetings.length === 0) {
            console.log('‚ùå Nenhuma reuni√£o encontrada para teste');
            return;
        }
        
        // Testar com a primeira reuni√£o
        const meeting = meetings[0];
        console.log(`üîç Testando reuni√£o: ${meeting.meetingId}`);
        console.log(`   - Status: ${meeting.status}`);
        console.log(`   - Dura√ß√£o m√°xima atual: ${meeting.maxDuration / 1000 / 60} minutos`);
        console.log(`   - Dura√ß√£o do v√≠deo: ${meeting.videoDuration ? meeting.videoDuration / 1000 + ' segundos' : 'N√£o definida'}`);
        console.log(`   - Iniciada em: ${meeting.startedAt ? meeting.startedAt.toLocaleString('pt-BR') : 'N√£o iniciada'}`);
        
        // Simular dura√ß√£o de v√≠deo (5 minutos)
        const videoDurationMs = 5 * 60 * 1000; // 5 minutos
        console.log(`\n‚è±Ô∏è Simulando dura√ß√£o do v√≠deo: ${videoDurationMs / 1000} segundos`);
        
        // Atualizar dura√ß√£o do v√≠deo
        await meeting.updateVideoDuration(videoDurationMs);
        console.log('‚úÖ Dura√ß√£o do v√≠deo atualizada');
        
        // Verificar se a reuni√£o expirou
        console.log('\nüîç Verificando expira√ß√£o...');
        const isExpired = meeting.isExpired();
        console.log(`   - Expirou: ${isExpired ? 'Sim' : 'N√£o'}`);
        
        if (meeting.startedAt) {
            const now = new Date();
            const elapsed = now.getTime() - meeting.startedAt.getTime();
            const videoDurationWithMargin = meeting.videoDuration + (30 * 1000);
            console.log(`   - Tempo decorrido: ${Math.round(elapsed / 1000)} segundos`);
            console.log(`   - Dura√ß√£o com margem: ${Math.round(videoDurationWithMargin / 1000)} segundos`);
        }
        
        // Testar com diferentes dura√ß√µes
        console.log('\nüß™ Testando diferentes dura√ß√µes...');
        const testDurations = [
            { name: 'V√≠deo curto', duration: 2 * 60 * 1000 }, // 2 minutos
            { name: 'V√≠deo m√©dio', duration: 10 * 60 * 1000 }, // 10 minutos
            { name: 'V√≠deo longo', duration: 30 * 60 * 1000 }  // 30 minutos
        ];
        
        for (const test of testDurations) {
            await meeting.updateVideoDuration(test.duration);
            const isExpired = meeting.isExpired();
            console.log(`   - ${test.name} (${test.duration / 1000}s): ${isExpired ? 'Expirou' : 'Ativa'}`);
        }
        
        console.log('\n‚úÖ Teste de dura√ß√£o do v√≠deo conclu√≠do!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    } finally {
        await mongoose.connection.close();
        console.log('üîå Conex√£o com MongoDB fechada');
    }
}

testVideoDuration();
